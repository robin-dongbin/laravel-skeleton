// This file is auto-generated by @hey-api/openapi-ts

export interface AuthenticatedUserRequest {
  nickname: string
}

export interface LoginRequest {
  username: string
  password: string
}

export interface RequestLogResource {
  id: string
  client_request_id: string | null
  ip: string | null
  method: string | null
  path: string | null
  headers: Array<unknown> | null
  payload: Array<unknown> | null
  response_status: number | null
  duration: number | null
  memory: number | null
  created_at: string | null
  updated_at: string | null
}

export interface RoleResource {
  value: string
  label: string
}

export interface UserRequest {
  username: string
  nickname: string
}

export interface UserResource {
  id: number
  username: string
  nickname: string | null
  avatar: string | null
  mobile: string | null
  timezone: string | null
  role: string
  status: string
  created_at: string | null
}

export interface AdminLoginData {
  body: LoginRequest
  path?: never
  query?: never
  url: '/login'
}

export interface AdminLoginErrors {
  /**
   * Validation error
   */
  422: {
    /**
     * Errors overview.
     */
    message: string
    /**
     * A detailed description of each field that failed validation.
     */
    errors: {
      [key: string]: Array<string>
    }
  }
}

export type AdminLoginError = AdminLoginErrors[keyof AdminLoginErrors]

export interface AdminLoginResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
    meta: {
      token: string
    }
  }
}

export type AdminLoginResponse = AdminLoginResponses[keyof AdminLoginResponses]

export interface AdminLogoutData {
  body?: never
  path?: never
  query?: never
  url: '/logout'
}

export interface AdminLogoutErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminLogoutError = AdminLogoutErrors[keyof AdminLogoutErrors]

export interface AdminLogoutResponses {
  /**
   * No content
   */
  204: void
}

export type AdminLogoutResponse = AdminLogoutResponses[keyof AdminLogoutResponses]

export interface AdminUserShowData {
  body?: never
  path?: never
  query?: never
  url: '/user'
}

export interface AdminUserShowErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminUserShowError = AdminUserShowErrors[keyof AdminUserShowErrors]

export interface AdminUserShowResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
  }
}

export type AdminUserShowResponse = AdminUserShowResponses[keyof AdminUserShowResponses]

export interface AdminUserUpdateData {
  body: AuthenticatedUserRequest
  path?: never
  query?: never
  url: '/user'
}

export interface AdminUserUpdateErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Validation error
   */
  422: {
    /**
     * Errors overview.
     */
    message: string
    /**
     * A detailed description of each field that failed validation.
     */
    errors: {
      [key: string]: Array<string>
    }
  }
}

export type AdminUserUpdateError = AdminUserUpdateErrors[keyof AdminUserUpdateErrors]

export interface AdminUserUpdateResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
  }
}

export type AdminUserUpdateResponse = AdminUserUpdateResponses[keyof AdminUserUpdateResponses]

export interface AdminUserPasswordUpdateData {
  body: {
    current_password: string
    password: string
    password_confirmation: string
  }
  path?: never
  query?: never
  url: '/user/password'
}

export interface AdminUserPasswordUpdateErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Validation error
   */
  422: {
    /**
     * Errors overview.
     */
    message: string
    /**
     * A detailed description of each field that failed validation.
     */
    errors: {
      [key: string]: Array<string>
    }
  }
}

export type AdminUserPasswordUpdateError = AdminUserPasswordUpdateErrors[keyof AdminUserPasswordUpdateErrors]

export interface AdminUserPasswordUpdateResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
  }
}

export type AdminUserPasswordUpdateResponse = AdminUserPasswordUpdateResponses[keyof AdminUserPasswordUpdateResponses]

export interface AdminDashboardData {
  body?: never
  path?: never
  query?: never
  url: '/dashboard'
}

export interface AdminDashboardErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminDashboardError = AdminDashboardErrors[keyof AdminDashboardErrors]

export interface AdminDashboardResponses {
  200: Array<string>
}

export type AdminDashboardResponse = AdminDashboardResponses[keyof AdminDashboardResponses]

export interface AdminRequestLogsIndexData {
  body?: never
  path?: never
  query?: {
    /**
     * Number of items per page.
     */
    per_page?: number
    /**
     * Current page
     */
    page?: number
  }
  url: '/request-logs'
}

export interface AdminRequestLogsIndexErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminRequestLogsIndexError = AdminRequestLogsIndexErrors[keyof AdminRequestLogsIndexErrors]

export interface AdminRequestLogsIndexResponses {
  /**
   * Paginated set of `RequestLogResource`
   */
  200: {
    data: Array<RequestLogResource>
    meta: {
      current_page: number
      from: number | null
      last_page: number
      /**
       * Generated paginator links.
       */
      links: Array<{
        url: string | null
        label: string
        active: boolean
      }>
      /**
       * Base path for paginator generated URLs.
       */
      path: string | null
      /**
       * Number of items shown per page.
       */
      per_page: number
      /**
       * Number of the last item in the slice.
       */
      to: number | null
      /**
       * Total number of items being paginated.
       */
      total: number
    }
    links: {
      first: string | null
      last: string | null
      prev: string | null
      next: string | null
    }
  }
}

export type AdminRequestLogsIndexResponse = AdminRequestLogsIndexResponses[keyof AdminRequestLogsIndexResponses]

export interface AdminRequestLogsShowData {
  body?: never
  path: {
    /**
     * The request log ID
     */
    requestLog: string
  }
  query?: never
  url: '/request-logs/{requestLog}'
}

export interface AdminRequestLogsShowErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Not found
   */
  404: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminRequestLogsShowError = AdminRequestLogsShowErrors[keyof AdminRequestLogsShowErrors]

export interface AdminRequestLogsShowResponses {
  /**
   * `RequestLogResource`
   */
  200: {
    data: RequestLogResource
  }
}

export type AdminRequestLogsShowResponse = AdminRequestLogsShowResponses[keyof AdminRequestLogsShowResponses]

export interface AdminRolesIndexData {
  body?: never
  path?: never
  query?: never
  url: '/roles'
}

export interface AdminRolesIndexErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminRolesIndexError = AdminRolesIndexErrors[keyof AdminRolesIndexErrors]

export interface AdminRolesIndexResponses {
  /**
   * Array of `RoleResource`
   */
  200: {
    data: Array<RoleResource>
  }
}

export type AdminRolesIndexResponse = AdminRolesIndexResponses[keyof AdminRolesIndexResponses]

export interface AdminUsersIndexData {
  body?: never
  path?: never
  query?: {
    /**
     * Number of items per page.
     */
    per_page?: number
    /**
     * Current page
     */
    page?: number
    /**
     * Field to sort by
     */
    sort?: string
    /**
     * Filter by username
     */
    'filter[username]'?: string
    /**
     * Filter by nickname
     */
    'filter[nickname]'?: string
    /**
     * Filter by status
     */
    'filter[status]'?: string
  }
  url: '/users'
}

export interface AdminUsersIndexErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminUsersIndexError = AdminUsersIndexErrors[keyof AdminUsersIndexErrors]

export interface AdminUsersIndexResponses {
  /**
   * Paginated set of `UserResource`
   */
  200: {
    data: Array<UserResource>
    meta: {
      current_page: number
      from: number | null
      last_page: number
      /**
       * Generated paginator links.
       */
      links: Array<{
        url: string | null
        label: string
        active: boolean
      }>
      /**
       * Base path for paginator generated URLs.
       */
      path: string | null
      /**
       * Number of items shown per page.
       */
      per_page: number
      /**
       * Number of the last item in the slice.
       */
      to: number | null
      /**
       * Total number of items being paginated.
       */
      total: number
    }
    links: {
      first: string | null
      last: string | null
      prev: string | null
      next: string | null
    }
  }
}

export type AdminUsersIndexResponse = AdminUsersIndexResponses[keyof AdminUsersIndexResponses]

export interface AdminUsersStoreData {
  body: UserRequest
  path?: never
  query?: never
  url: '/users'
}

export interface AdminUsersStoreErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Validation error
   */
  422: {
    /**
     * Errors overview.
     */
    message: string
    /**
     * A detailed description of each field that failed validation.
     */
    errors: {
      [key: string]: Array<string>
    }
  }
}

export type AdminUsersStoreError = AdminUsersStoreErrors[keyof AdminUsersStoreErrors]

export interface AdminUsersStoreResponses {
  /**
   * `UserResource`
   */
  201: {
    data: UserResource
  }
}

export type AdminUsersStoreResponse = AdminUsersStoreResponses[keyof AdminUsersStoreResponses]

export interface AdminUsersDestroyData {
  body?: never
  path: {
    /**
     * The user ID
     */
    user: number
  }
  query?: never
  url: '/users/{user}'
}

export interface AdminUsersDestroyErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Not found
   */
  404: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminUsersDestroyError = AdminUsersDestroyErrors[keyof AdminUsersDestroyErrors]

export interface AdminUsersDestroyResponses {
  /**
   * No content
   */
  204: void
}

export type AdminUsersDestroyResponse = AdminUsersDestroyResponses[keyof AdminUsersDestroyResponses]

export interface AdminUsersShowData {
  body?: never
  path: {
    /**
     * The user ID
     */
    user: number
  }
  query?: never
  url: '/users/{user}'
}

export interface AdminUsersShowErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Not found
   */
  404: {
    /**
     * Error overview.
     */
    message: string
  }
}

export type AdminUsersShowError = AdminUsersShowErrors[keyof AdminUsersShowErrors]

export interface AdminUsersShowResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
  }
}

export type AdminUsersShowResponse = AdminUsersShowResponses[keyof AdminUsersShowResponses]

export interface AdminUsersUpdateData {
  body: UserRequest
  path: {
    /**
     * The user ID
     */
    user: number
  }
  query?: never
  url: '/users/{user}'
}

export interface AdminUsersUpdateErrors {
  /**
   * Unauthenticated
   */
  401: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Authorization error
   */
  403: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Not found
   */
  404: {
    /**
     * Error overview.
     */
    message: string
  }
  /**
   * Validation error
   */
  422: {
    /**
     * Errors overview.
     */
    message: string
    /**
     * A detailed description of each field that failed validation.
     */
    errors: {
      [key: string]: Array<string>
    }
  }
}

export type AdminUsersUpdateError = AdminUsersUpdateErrors[keyof AdminUsersUpdateErrors]

export interface AdminUsersUpdateResponses {
  /**
   * `UserResource`
   */
  200: {
    data: UserResource
  }
}

export type AdminUsersUpdateResponse = AdminUsersUpdateResponses[keyof AdminUsersUpdateResponses]

export interface ClientOptions {
  baseUrl: 'http://laravel-skeleton.test/api/admin' | (string & {})
}
